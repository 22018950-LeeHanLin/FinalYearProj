pipeline {
    agent any

    environment {
        SONAR_HOST = 'http://127.0.0.1:9000'
        SONAR_PROJECT_KEY = 'jenkin'
        SONARQUBE_SERVER_NAME = 'sonarserver'
        DOCKER_WEB_IMAGE = 'apache-image'
        DOCKER_DB_IMAGE = 'mysql-image'
        WEB_CONTAINER = 'apache-container'
        DB_CONTAINER = 'mysql-container'
        GIT_REPO = 'https://github.com/22018950-LeeHanLin/FinalYearProj.git'
        CONTAINER_FILES_PATH = '/fyp/jingyi/container-files'
        DOCKER_COMPOSE_FILE = "${CONTAINER_FILES_PATH}/docker-compose1.yml"
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    // Ensure the container files directory exists and is writable
                    sh "sudo mkdir -p ${CONTAINER_FILES_PATH}"
                    sh "sudo chown -R jenkins:jenkins ${CONTAINER_FILES_PATH}"

                    // Check and download XAMPP for Linux
                    if (fileExists("${CONTAINER_FILES_PATH}/xampp-linux-x64-8.2.12-0-installer.run")) {
                        echo "XAMPP installer already exists."
                    } else {
                        sh """
                        wget https://www.apachefriends.org/xampp-files/8.2.12/xampp-linux-x64-8.2.12-0-installer.run \
                        -O ${CONTAINER_FILES_PATH}/xampp-linux-x64-8.2.12-0-installer.run --no-check-certificate
                        chmod +x ${CONTAINER_FILES_PATH}/xampp-linux-x64-8.2.12-0-installer.run
                        """
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                script {
                    // Ensure the folder is clean before cloning
                    sh "sudo rm -rf ${CONTAINER_FILES_PATH}"
                    sh "git clone ${GIT_REPO} ${CONTAINER_FILES_PATH}"
                    sh "sudo chown -R jenkins:jenkins ${CONTAINER_FILES_PATH}"
                    echo "Code checked out successfully."
                }
            }
        }

        stage('Build and Test Containers') {
            parallel {
                stage('Build Apache Image') {
                    steps {
                        script {
                            sh "docker build -t ${DOCKER_WEB_IMAGE} -f ${CONTAINER_FILES_PATH}/Dockerfile.web ${CONTAINER_FILES_PATH}"
                            echo "Apache image built successfully."
                        }
                    }
                }
                stage('Build MySQL Image') {
                    steps {
                        script {
                            sh "docker build -t ${DOCKER_DB_IMAGE} -f ${CONTAINER_FILES_PATH}/Dockerfile.db ${CONTAINER_FILES_PATH}"
                            echo "MySQL image built successfully."
                        }
                    }
                }
            }
        }

        stage('Run SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool name: 'jenkin', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                    withSonarQubeEnv("${SONARQUBE_SERVER_NAME}") { 
                        sh """
                        ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.host.url=${SONAR_HOST} \
                        -Dsonar.verbose=true
                        """
                    }
                }
            }
        }

        stage('Gatekeeper Approval') {
            steps {
                script {
                    def deployStatus = input message: 'Proceed to deploy or rollback?', ok: 'Proceed', parameters: [
                        choice(name: 'DEPLOY_STATUS', choices: ['good', 'bad'], description: 'Deployment Status')
                    ]
                    env.DEPLOY_STATUS = deployStatus
                }
            }
        }

        stage('Deploy Containers') {
            when {
                expression { env.DEPLOY_STATUS == 'good' }
            }
            steps {
                script {
                    echo "Stopping and removing any existing containers..."
                    sh """
                    docker ps -a | grep '${WEB_CONTAINER}' && docker stop ${WEB_CONTAINER} && docker rm ${WEB_CONTAINER} || echo 'No existing Apache container found'
                    docker ps -a | grep '${DB_CONTAINER}' && docker stop ${DB_CONTAINER} && docker rm ${DB_CONTAINER} || echo 'No existing MySQL container found'
                    """

                    echo "Ensuring Docker network exists..."
                    sh """
                    docker network inspect container-files_container_network > /dev/null 2>&1 || \
                    docker network create --subnet=192.168.1.0/24 container-files_container_network
                    """

                    echo "Deploying containers..."
                    sh "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
                }
            }
        }

        stage('Rollback') {
            when {
                expression { env.DEPLOY_STATUS == 'bad' }
            }
            steps {
                script {
                    echo "Rollback initiated."
                    sh "${CONTAINER_FILES_PATH}/rollback.sh"
                    echo "Checking if website is running..."
                    sh "curl -Is http://localhost:8081 | head -n 1 || echo 'Website not reachable, rollback required!'"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
